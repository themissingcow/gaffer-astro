import imath
import IECore
import Gaffer
import GafferAstro

Gaffer.Metadata.registerNode(

	GafferAstro.PixInsight,

	"layout:section:Settings.Script:collapsed", False,

	plugs = {

		"in" : [
			'nodule:type', 'GafferUI::StandardNodule',
			'description', 'The input image',
			'plugValueWidget:type', '',
			'noduleLayout:spacing', 2.0,
		],

		"out" : [
			'nodule:type', 'GafferUI::StandardNodule',
			'description', 'The output image generated by this node.',
		],

		"fileName" : [

			"description",
			"""
			""",

			"plugValueWidget:type", "GafferUI.FileSystemPathPlugValueWidget",
			"path:leaf", True,
			"path:bookmarks", "xisf",
			"fileSystemPath:extensions", "xisf",
			"fileSystemPath:extensionsLabel", "Show only image files",
			"fileSystemPath:includeSequences", False,

		],

		"channels" : [

			"description",
			"""
			The names of the channels to be written to the file.
			Names should be separated by spaces and may contain any
			of Gaffer's standard wildcards.
			""",

			"plugValueWidget:type", "GafferImageUI.ChannelMaskPlugValueWidget",

		],

		"dataType" : [

			"description",
			"""
			The data type to be written to the file.
			""",

			"plugValueWidget:type", "GafferUI.PresetsPlugValueWidget",
			"preset:8-bit", "uint8",
			"preset:16-bit", "uint16",
			"preset:Float", "float",

		],

		"pixScript" : [
			"plugValueWidget:type", "GafferUI.MultiLineStringPlugValueWidget",
			"layout:section", "Settings.Script"
		],

		"variables" : [
			"layout:section", "Settings.Variables"
		]

	}


)
